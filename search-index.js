var searchIndex = {};
searchIndex["lodepng"] = {"doc":"","items":[[3,"RGB","lodepng","This is it. The component type can be `u8` (aliased as `RGB8`), `u16` (aliased as `RGB16`), or any other type (but simple copyable types are recommended.)",null,null],[12,"r","","Red",0,null],[12,"g","","Green",0,null],[12,"b","","Blue",0,null],[6,"RGBA","","Alpha is last. The crate doesn't impose which value represents transparency, but usually it's 0 = transparent, 255 = opaque.",null,null],[3,"Grey","","Opaque greyscale pixel (acces with `px.0`)",null,null],[12,"0","","",1,null],[3,"GreyAlpha","","Greyscale pixel with alpha (`px.1` is alpha)",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[3,"ChunkRef","","Reference to a chunk",null,null],[3,"Bitmap","","Low-level representation of an image",null,null],[12,"buffer","","Raw bitmap memory. Layout depends on color mode and bitdepth used to create it.",3,null],[12,"width","","Width in pixels",3,null],[12,"height","","Height in pixels",3,null],[3,"ChunkRefMut","","",null,null],[4,"Image","","Bitmap types.",null,null],[13,"RawData","","Bytes of the image. See bpp how many pixels per element there are",4,null],[13,"Grey","","",4,null],[13,"Grey16","","",4,null],[13,"GreyAlpha","","",4,null],[13,"GreyAlpha16","","",4,null],[13,"RGBA","","",4,null],[13,"RGB","","",4,null],[13,"RGBA16","","",4,null],[13,"RGB16","","",4,null],[4,"ChunkPosition","","Position in the file section afterâ€¦",null,null],[13,"IHDR","","",5,null],[13,"PLTE","","",5,null],[13,"IDAT","","",5,null],[5,"decode_memory","","Converts PNG data in memory to raw pixel data.",null,{"inputs":[{"name":"bytes"},{"name":"colortype"},{"name":"c_uint"}],"output":{"name":"result"}}],[5,"decode32","","Same as `decode_memory`, but always decodes to 32-bit RGBA raw image",null,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[5,"decode24","","Same as `decode_memory`, but always decodes to 24-bit RGB raw image",null,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[5,"decode_file","","Load PNG from disk, from file with given name. Same as the other decode functions, but instead takes a file path as input.",null,{"inputs":[{"name":"p"},{"name":"colortype"},{"name":"c_uint"}],"output":{"name":"result"}}],[5,"decode32_file","","Same as `decode_file`, but always decodes to 32-bit RGBA raw image",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"decode24_file","","Same as `decode_file`, but always decodes to 24-bit RGB raw image",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"encode_memory","","Converts raw pixel data into a PNG image in memory. The colortype and bitdepth of the output PNG image cannot be chosen, they are automatically determined by the colortype, bitdepth and content of the input pixel data.",null,null],[5,"encode32","","Same as `encode_memory`, but always encodes from 32-bit RGBA raw image",null,null],[5,"encode24","","Same as `encode_memory`, but always encodes from 24-bit RGB raw image",null,null],[5,"encode_file","","Converts raw pixel data into a PNG file on disk. Same as the other encode functions, but instead takes a file path as output.",null,null],[5,"encode32_file","","Same as `encode_file`, but always encodes from 32-bit RGBA raw image",null,null],[5,"encode24_file","","Same as `encode_file`, but always encodes from 24-bit RGB raw image",null,null],[0,"ffi","","",null,null],[3,"Error","lodepng::ffi","",null,null],[12,"0","","",6,null],[3,"ColorMode","","Color mode of an image. Contains all information required to decode the pixel bits to RGBA colors. This information is the same as used in the PNG file format, and is used both for PNG and raw image data in LodePNG.",null,null],[12,"colortype","","color type, see PNG standard",7,null],[3,"DecompressSettings","","",null,null],[3,"CompressSettings","","Settings for zlib compression. Tweaking these settings tweaks the balance between speed and compression ratio.",null,null],[12,"btype","","the block type for LZ (0, 1, 2 or 3, see zlib standard). Should be 2 for proper compression.",8,null],[12,"use_lz77","","whether or not to use LZ77. Should be 1 for proper compression.",8,null],[12,"windowsize","","must be a power of two <= 32768. higher compresses more but is slower. Typical value: 2048.",8,null],[12,"minmatch","","mininum lz77 length. 3 is normally best, 6 can be better for some PNGs. Default: 0",8,null],[12,"nicematch","","stop searching if >= this length found. Set to 258 for best compression. Default: 128",8,null],[12,"lazymatching","","use lazy matching: better compression but a bit slower. Default: true",8,null],[12,"custom_zlib","","use custom zlib encoder instead of built in one (default: None)",8,null],[12,"custom_deflate","","use custom deflate encoder instead of built in one (default: null) if custom_zlib is used, custom_deflate is ignored since only the built in zlib function will call custom_deflate",8,null],[12,"custom_context","","optional custom settings for custom functions",8,null],[3,"Time","","The information of a `Time` chunk in PNG",null,null],[12,"year","","",9,null],[12,"month","","",9,null],[12,"day","","",9,null],[12,"hour","","",9,null],[12,"minute","","",9,null],[12,"second","","",9,null],[3,"Info","","Information about the PNG image, except pixels, width and height",null,null],[12,"compression_method","","compression method of the original file. Always 0.",10,null],[12,"filter_method","","filter method of the original file",10,null],[12,"interlace_method","","interlace method of the original file",10,null],[12,"color","","color type and bits, palette and transparency of the PNG file",10,null],[12,"background_defined","","suggested background color chunk (bKGD) This color uses the same color mode as the PNG (except alpha channel), which can be 1-bit to 16-bit.",10,null],[12,"background_r","","red component of suggested background color",10,null],[12,"background_g","","green component of suggested background color",10,null],[12,"background_b","","blue component of suggested background color",10,null],[12,"time_defined","","set to 1 to make the encoder generate a tIME chunk",10,null],[12,"time","","time chunk (tIME)",10,null],[12,"phys_defined","","if 0, there is no pHYs chunk and the values below are undefined, if 1 else there is one",10,null],[12,"phys_x","","pixels per unit in x direction",10,null],[12,"phys_y","","pixels per unit in y direction",10,null],[12,"phys_unit","","may be 0 (unknown unit) or 1 (metre)",10,null],[12,"unknown_chunks_data","","unknown chunks There are 3 buffers, one for each position in the PNG where unknown chunks can appear each buffer contains all unknown chunks for that position consecutively The 3 buffers are the unknown chunks between certain critical chunks: 0: IHDR-`PLTE`, 1: `PLTE`-IDAT, 2: IDAT-IEND Do not allocate or traverse this data yourself. Use the chunk traversing functions declared later, such as lodepng_chunk_next and lodepng_chunk_append, to read/write this struct.",10,null],[12,"unknown_chunks_size","","",10,null],[3,"DecoderSettings","","Settings for the decoder. This contains settings for the PNG and the Zlib decoder, but not the `Info` settings from the `Info` structs.",null,null],[12,"zlibsettings","","in here is the setting to ignore Adler32 checksums",11,null],[12,"ignore_crc","","ignore CRC checksums",11,null],[12,"color_convert","","",11,null],[12,"read_text_chunks","","",11,null],[12,"remember_unknown_chunks","","",11,null],[3,"EncoderSettings","","",null,null],[12,"zlibsettings","","settings for the zlib encoder, such as window size, ...",12,null],[12,"auto_convert","","how to automatically choose output PNG color type, if at all",12,null],[12,"filter_palette_zero","","If true, follows the official PNG heuristic: if the PNG uses a palette or lower than 8 bit depth, set all filters to zero. Otherwise use the filter_strategy. Note that to completely follow the official PNG heuristic, filter_palette_zero must be true and filter_strategy must be FilterStrategy::MINSUM",12,null],[12,"filter_strategy","","Which filter strategy to use when not using zeroes due to filter_palette_zero. Set filter_palette_zero to 0 to ensure always using your chosen strategy. Default: FilterStrategy::MINSUM",12,null],[12,"force_palette","","force creating a `PLTE` chunk if colortype is 2 or 6 (= a suggested palette). If colortype is 3, `PLTE` is always created",12,null],[12,"add_id","","add LodePNG identifier and version as a text chunk, for debugging",12,null],[12,"text_compression","","encode text chunks as zTXt chunks instead of tEXt chunks, and use compression in iTXt chunks",12,null],[3,"State","","The settings, state and information for extended encoding and decoding",null,null],[12,"decoder","","",13,null],[12,"encoder","","",13,null],[12,"info_raw","","specifies the format in which you would like to get the raw pixel buffer",13,null],[12,"info_png","","info of the PNG image obtained after decoding",13,null],[12,"error","","",13,null],[3,"ColorProfile","","Gives characteristics about the colors of the image, which helps decide which color model to use for encoding. Used internally by default if \"auto_convert\" is enabled. Public because it's useful for custom algorithms.",null,null],[12,"colored","","not greyscale",14,null],[12,"key","","image is not opaque and color key is possible instead of full alpha",14,null],[12,"key_r","","key values, always as 16-bit, in 8-bit case the byte is duplicated, e.g. 65535 means 255",14,null],[12,"key_g","","",14,null],[12,"key_b","","",14,null],[12,"alpha","","image is not opaque and alpha channel or alpha palette required",14,null],[12,"numcolors","","amount of colors, up to 257. Not valid if bits == 16.",14,null],[12,"palette","","Remembers up to the first 256 RGBA colors, in no particular order",14,null],[12,"bits","","bits per channel (not for palette). 1,2 or 4 for greyscale only. 16 if 16-bit per channel required.",14,null],[4,"ColorType","","Type for `decode`, `encode`, etc. Same as standard PNG color types.",null,null],[13,"GREY","","greyscale: 1, 2, 4, 8, 16 bit",15,null],[13,"RGB","","RGB: 8, 16 bit",15,null],[13,"PALETTE","","palette: 1, 2, 4, 8 bit",15,null],[13,"GREY_ALPHA","","greyscale with alpha: 8, 16 bit",15,null],[13,"RGBA","","RGB with alpha: 8, 16 bit",15,null],[4,"FilterStrategy","","automatically use color type with less bits per pixel if losslessly possible. Default: `AUTO`",null,null],[13,"ZERO","","every filter at zero",16,null],[13,"MINSUM","","Use filter that gives minumum sum, as described in the official PNG filter heuristic.",16,null],[13,"ENTROPY","","Use the filter type that gives smallest Shannon entropy for this scanline. Depending on the image, this is better or worse than minsum.",16,null],[13,"BRUTE_FORCE","","Brute-force-search PNG filters by compressing each filter for each scanline. Experimental, very slow, and only rarely gives better compression than MINSUM.",16,null],[13,"PREDEFINED","","use predefined_filters buffer: you specify the filter type for each scanline",16,null],[5,"lodepng_malloc","","",null,null],[5,"lodepng_realloc","","",null,null],[5,"lodepng_free","","",null,null],[5,"lodepng_state_init","","",null,null],[5,"lodepng_state_cleanup","","",null,{"inputs":[{"name":"state"}],"output":null}],[5,"lodepng_state_copy","","",null,null],[5,"lodepng_error_text","","",null,null],[5,"lodepng_encode32","","",null,null],[5,"lodepng_encode24","","",null,null],[5,"lodepng_encode_file","","",null,null],[5,"lodepng_encode32_file","","",null,null],[5,"lodepng_encode24_file","","",null,null],[5,"lodepng_get_bpp_lct","","",null,{"inputs":[{"name":"colortype"},{"name":"c_uint"}],"output":{"name":"c_uint"}}],[5,"lodepng_get_bpp","","",null,{"inputs":[{"name":"colormode"}],"output":{"name":"c_uint"}}],[5,"lodepng_get_channels","","",null,{"inputs":[{"name":"colormode"}],"output":{"name":"c_uint"}}],[5,"lodepng_is_greyscale_type","","",null,{"inputs":[{"name":"colormode"}],"output":{"name":"c_uint"}}],[5,"lodepng_is_alpha_type","","",null,{"inputs":[{"name":"colormode"}],"output":{"name":"c_uint"}}],[5,"lodepng_is_palette_type","","",null,{"inputs":[{"name":"colormode"}],"output":{"name":"c_uint"}}],[5,"lodepng_has_palette_alpha","","",null,{"inputs":[{"name":"colormode"}],"output":{"name":"c_uint"}}],[5,"lodepng_can_have_alpha","","",null,{"inputs":[{"name":"colormode"}],"output":{"name":"c_uint"}}],[5,"lodepng_get_raw_size","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"},{"name":"colormode"}],"output":{"name":"usize"}}],[5,"lodepng_get_raw_size_lct","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"},{"name":"colortype"},{"name":"c_uint"}],"output":{"name":"usize"}}],[5,"lodepng_huffman_code_lengths","","",null,null],[5,"lodepng_palette_clear","","",null,{"inputs":[{"name":"colormode"}],"output":null}],[5,"lodepng_palette_add","","",null,{"inputs":[{"name":"colormode"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"error"}}],[5,"lodepng_clear_text","","",null,{"inputs":[{"name":"info"}],"output":null}],[5,"lodepng_add_text","","",null,null],[5,"lodepng_clear_itext","","",null,{"inputs":[{"name":"info"}],"output":null}],[5,"lodepng_add_itext","","",null,null],[5,"lodepng_chunk_create","","",null,null],[5,"lodepng_chunk_length","","",null,null],[5,"lodepng_chunk_type","","",null,null],[5,"lodepng_chunk_type_equals","","",null,null],[5,"lodepng_chunk_data_const","","",null,null],[5,"lodepng_chunk_next","","",null,null],[5,"lodepng_chunk_next_const","","",null,null],[5,"lodepng_chunk_ancillary","","",null,null],[5,"lodepng_chunk_private","","",null,null],[5,"lodepng_chunk_safetocopy","","",null,null],[5,"lodepng_chunk_data","","",null,null],[5,"lodepng_chunk_check_crc","","",null,null],[5,"lodepng_chunk_generate_crc","","",null,null],[5,"lodepng_chunk_append","","",null,null],[5,"lodepng_color_mode_init","","",null,null],[5,"lodepng_color_mode_cleanup","","",null,{"inputs":[{"name":"colormode"}],"output":null}],[5,"lodepng_color_mode_equal","","",null,{"inputs":[{"name":"colormode"},{"name":"colormode"}],"output":{"name":"c_uint"}}],[5,"lodepng_color_mode_copy","","",null,null],[5,"lodepng_inflate","","",null,null],[5,"lodepng_deflate","","",null,null],[5,"lodepng_zlib_decompress","","",null,null],[5,"zlib_decompress","","",null,null],[5,"lodepng_zlib_compress","","",null,null],[5,"zlib_compress","","",null,null],[5,"lodepng_compress_settings_init","","",null,null],[5,"lodepng_decompress_settings_init","","",null,null],[5,"lodepng_crc32","","",null,null],[5,"lodepng_info_init","","",null,null],[5,"lodepng_info_cleanup","","",null,{"inputs":[{"name":"info"}],"output":null}],[5,"lodepng_info_copy","","",null,null],[5,"lodepng_info_swap","","",null,{"inputs":[{"name":"info"},{"name":"info"}],"output":null}],[5,"lodepng_convert","","",null,null],[5,"lodepng_inspect","","",null,null],[5,"lodepng_decode","","",null,null],[5,"lodepng_decode_memory","","",null,null],[5,"lodepng_decode32","","",null,null],[5,"lodepng_decode24","","",null,null],[5,"lodepng_decode_file","","",null,null],[5,"lodepng_decode32_file","","",null,null],[5,"lodepng_decode24_file","","",null,null],[5,"lodepng_decoder_settings_init","","",null,null],[5,"lodepng_buffer_file","","",null,null],[5,"lodepng_load_file","","",null,null],[5,"lodepng_save_file","","",null,null],[5,"lodepng_encode","","",null,null],[5,"lodepng_get_color_profile","","",null,null],[5,"lodepng_auto_choose_color","","",null,null],[5,"lodepng_filesize","","",null,null],[5,"lodepng_encode_memory","","",null,null],[5,"lodepng_encoder_settings_init","","",null,null],[5,"lodepng_color_profile_init","","",null,null],[6,"custom_compress_callback","","",null,null],[6,"custom_decompress_callback","","",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"decompresssettings"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"compresssettings"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"time"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"time"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"decodersettings"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"filterstrategy"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"filterstrategy"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"encodersettings"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"as_str","","Returns an English description of the numerical error code.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_result","","Helper function for the library",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"c_description","","",6,null],[11,"new","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"colortype","","",7,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"bitdepth","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_bitdepth","","",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"palette_clear","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"palette_add","","add 1 color to the palette",7,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"result"}}],[11,"palette","","",7,null],[11,"palette_mut","","",7,null],[11,"bpp","","get the total amount of bits per pixel, based on colortype and bitdepth in the struct",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"channels","","get the amount of color channels used, based on colortype in the struct. If a palette is used, it counts as 1 channel.",7,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"is_greyscale_type","","is it a greyscale type? (only colortype 0 or 4)",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_alpha_type","","has it got an alpha channel? (only colortype 2 or 6)",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_palette_type","","has it got a palette? (only colortype 3)",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_palette_alpha","","only returns true if there is a palette and there is a value in the palette with alpha < 255. Loops through the palette to check this.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"can_have_alpha","","Check if the given color info indicates the possibility of having non-opaque pixels in the PNG image. Returns true if the image can have translucent or invisible pixels (it still be opaque if it doesn't use such pixels). Returns false if the image can only have opaque pixels. In detail, it returns true only if it's a color type with alpha, or has a palette with non-opaque values, or if \"key_defined\" is true.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_size","","Returns the byte size of a raw image buffer with given width, height and color mode",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"to_color_mode","","Create color mode with given type and bitdepth",15,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"colormode"}}],[11,"channels","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"text_keys_cstr","","",10,{"inputs":[{"name":"self"}],"output":{"name":"textkeyscstriter"}}],[11,"itext_keys","","",10,{"inputs":[{"name":"self"}],"output":{"name":"itextkeysiter"}}],[11,"clear_text","","use this to clear the texts again after you filled them in",10,{"inputs":[{"name":"self"}],"output":null}],[11,"add_text","","push back both texts at once",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"clear_itext","","use this to clear the itexts again after you filled them in",10,{"inputs":[{"name":"self"}],"output":null}],[11,"add_itext","","push back the 4 texts of 1 chunk at once",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"append_chunk","","",10,{"inputs":[{"name":"self"},{"name":"chunkposition"},{"name":"chunkref"}],"output":{"name":"result"}}],[11,"create_chunk","","",10,null],[11,"get","","",10,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"option"}}],[11,"unknown_chunks","","",10,{"inputs":[{"name":"self"},{"name":"chunkposition"}],"output":{"name":"chunksiter"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"set_auto_convert","","",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_filter_strategy","","",13,{"inputs":[{"name":"self"},{"name":"filterstrategy"},{"name":"bool"}],"output":null}],[11,"set_custom_zlib","","",13,null],[11,"set_custom_deflate","","",13,null],[11,"info_raw","","",13,{"inputs":[{"name":"self"}],"output":{"name":"colormode"}}],[11,"info_raw_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"colormode"}}],[11,"info_png","","",13,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"info_png_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"color_convert","","whether to convert the PNG to the color type you want. Default: yes",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"read_text_chunks","","if false but remember_unknown_chunks is true, they're stored in the unknown chunks.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"remember_unknown_chunks","","store all bytes from unknown chunks in the LodePNGInfo (off by default, useful for a png editor)",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_icc","","Decompress ICC profile from iCCP chunk",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"decode","","Load PNG from buffer using State's settings",13,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"result"}}],[11,"decode_file","","",13,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"inspect","","Returns (width, height)",13,null],[11,"encode","","",13,null],[11,"encode_file","","",13,null],[11,"fmt","lodepng","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"grey"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"grey"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"grey"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"greyalpha"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"greyalpha"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"greyalpha"}],"output":{"name":"bool"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"chunkposition"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"chunkposition"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"chunkref"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",18,null],[11,"is_type","","",18,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_ancillary","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_private","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_safe_to_copy","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"data","","",18,null],[11,"check_crc","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"data_mut","","",19,null],[11,"generate_crc","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"new","lodepng::ffi","Default compression settings",8,{"inputs":[],"output":{"name":"compresssettings"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"new","lodepng","Convenience function for creating a new pixel",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"iter","","Iterate over color components (R, G, and B)",0,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"alpha","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"new_alpha","","",0,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"rgba"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",0,null],[11,"add","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"from","","",0,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"mul","","",0,null],[11,"map","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"sub","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"rgb"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"as_slice","","",0,null],[11,"as_mut_slice","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"ordering"}}],[11,"from_iter","","Takes exactly 3 elements from the iterator and creates a new instance. Panics if there are fewer elements in the iterator.",0,{"inputs":[{"name":"i"}],"output":{"name":"rgb"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"RGB"],[3,"Grey"],[3,"GreyAlpha"],[3,"Bitmap"],[4,"Image"],[4,"ChunkPosition"],[3,"Error"],[3,"ColorMode"],[3,"CompressSettings"],[3,"Time"],[3,"Info"],[3,"DecoderSettings"],[3,"EncoderSettings"],[3,"State"],[3,"ColorProfile"],[4,"ColorType"],[4,"FilterStrategy"],[3,"DecompressSettings"],[3,"ChunkRef"],[3,"ChunkRefMut"]]};
initSearch(searchIndex);
